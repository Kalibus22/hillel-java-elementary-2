.
1. В чем разница между JVM, JDK, JRE?

 Это три различных понятия. JVM - "Виртуальная машина Ява", программная оболочка-интерпретатор, который работает на каждом из устройств, на котором необходимо выполнять Java-код, и обеспечивает работу байт-кода java. JVM входит в состав как JDK, так и JRE. JDK - пакет инструментов для разработчиков JAVA, который включает компилятор javac и другие инструменты разработки. JRE - Java runtime environment - минимально необходимый пакет для запуска Java - приложений, включает в себя саму виртуальную машину JAVA и набор стандартных библиотек. JDK включает в себя и JRE.

2. Для чего используется программа javac, для чего java? 

  Javac, или Java compiler, это утитилита входящая в состав JDK и необходимая для преобразования кода Java в байт-код, который понимает JVM. 
  Java.exe - запускаемый файл виртуальной машины Java, который непосредственно исполняет программу, интерпретируя байт-код и выполняя его.

3. Файл с программой на java находится в “d:\projects\src\Program.java” В папке “d:\projects” также находится папка “classes” Напишите, как бы вы скомпилировали программу и результат компиляции (байткод) поместили в папку “d:\projects\classes”: 

   С помощью команды: javac d:\projects\src\Program.java -d d:\projects\classes\

4. Структура папок как в 3м задании, вы успешно скомпилировали файл и был создан Program.class в папке “d:\projects\classes”? Вы находитесь в папке “d:\projects”. Напишите команду запуска вашего приложения в командной строке: 

   java -classpath .\classes Program

5. В каких 3х состояниях может находиться файл в репозитории (базе данных) Git? Опишите каждое из них.

   Файлы в репозитории могут находится в следующих состояниях: Modified (Изменен) - В файл были внесены изменения, но файл не сохранен в репозитории; Staged (Добавлен) - В файл были внесены изменения, которые будут сохранены в репозитории соследующим коммитом; Committed (Подтвержден) - Файл сохранен в репозитории.
 
6. Для чего нужны команды “git commit” и “git push”? 

   “git commit” сохраняет все добавленные командой git add файлы в репозиторий. При этом создается очередная версия (Snapshot) в репозитории.
   “git push”   отправляет изменения из локального репозитория в удаленный. 

7. Для чего команда git status? 

	Данная команда выводит на экран перечень измененных файлов и их состояния. Позволяет контролировать, какие файлы изменены, какие добавлены к следующему коммиту, синхронизированы ли локальный и удаленный репозитории.

8. git checkout master ? 
	
	После ввода команды активная ветка в репозитории будет изменена на "master".

9. git checkout -b abcdefgh ? 

	Команда создаст новую ветку с именем abcdefgh, и сделает ее активной.

10.git branch? 

	Без дополнительных аргументов - выводит имя текущей ветки. Если после git branch указать имя - создает новую ветку, но не делает ее активной.
	
11.git add . ? 

	Добавляет все файлы в текущей директории, которые были изменены, к следующему коммиту.	

12.git pull origin master ? 

	Синхронизирует изменения между репозиториями либо ветками: в данном случае, изменения из ветки origin копируются в ветку master, и происходит merge веток. Как правило, origin относится к удаленному репозиторию, с которого была сделана копия, и в таком написании команда синхронизирует удаленный репозиторий с веткой master в локальном репозитории. 	

13.git commit -m “…” ? 

	Сохраняет в локальном репозитории все изменения файлов, добавленных к мониторингу состояния в git командой git add, создает новую версию (snapshot) в активной ветке, при этом устанавливает комментарий из текста, заключенного в кавычках. 

14.git stash и git stash pop ? 

	git stash Позволяет сохранить текущее состояние измененных, но не добавленных к коммиту файлов в репозитории без создания новой версии файлов. Команда применяется для создания "Черновой" копии файлов, над которыми планируется далее работа снова. При этом, все сделанные, но не подтвержденные изменения файлов будут возвращены к последней подтвержденной версии.
	git stash pop Данная команда восстановит сохраненное "Черновое" состояние файлов, созданное ранее командой git stash, и сразу же удалит это сохранение из репозитория. 

15.git log ? 

	Команда выводит историю коммитов в текущей ветке, с указанием даты, автора, комментария к коммиту.

16.git remote -v ? 

	Просмотреть список сохраненных алиасов для удаленных репозиториев, с указанием адреса репозитория.

17.git rebase -i HEAD~2 ? 

	


18.git push origin master ? 
19.git pull origin master ? 
20.git pull upstream master? 
21.git rebase master?

